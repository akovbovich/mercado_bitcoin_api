type 'a response = {
     ? response_data: 'a option
     ; status_code: int
     ; server_unix_timestamp: int
     ; ?error_message: string option
}


(* System messages types *)

type level = [
    Info <json name="INFO">
  | Warning <json name="WARNING">
  | Error <json name="ERROR">
] <ocaml repr="classic">

type system_message={
     msg_date: int <json repr="string">
     ; level: level
     ; event_code: int
     ; msg_content: string
}

(* TODO: Can this type be unwrapped? since the type makes it implicit that we have "messages" i.e. a list of messages *)

type system_message_list = {
     messages: system_message list
}

type system_messages_response = system_message_list response

type balance = {
  available: float
; total: float
; ?amount_open_orders: int option
}

type limit = {
  available: float
; total: float
}


type account_info = {
  balance : (string * balance) list <json repr="object">
; withdrawal_limits: (string * limit) list <json repr="object">
}

type account_info_response = account_info response

type operation = {
  operation_id: int
; quantity: float
; price: float
; fee_rate: float
; executed_timestamp: int
}

type order = {
  order_id: int
; coin_pair: string
; order_type: int
; status: int
; has_fills: bool
; quantity: float
; limit_price: float
; executed_quantity: float
; executed_price_avg: float
; fee: float
; created_timestamp: int
; updated_timestamp: int
; operations: operation list }

type order_r = {
  order : order
}

type order_response = order_r response

type orders = {
  orders : order list
}

type orders_response = orders response
(* Orderbook types *)

type book_order = {
  order_id: int
; quantity: float
; limit_price: float
; is_owner: bool
}

type orderbook_t = {
  bids : book_order list
; asks : book_order list
; last_order_id: int
}

type orderbook = {
  orderbook: orderbook_t
}
